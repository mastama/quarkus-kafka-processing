# ===== App =====
quarkus.application.name=quarkus-kafka-processing

# ===== Kafka =====
# Use 9094 when running docker-compose (external listener)
kafka.bootstrap.servers=localhost:9094

# Incoming: consume raw orders
mp.messaging.incoming.orders-in.connector=smallrye-kafka
mp.messaging.incoming.orders-in.topic=orders.raw
mp.messaging.incoming.orders-in.value.deserializer=com.yolifay.kafka.OrderInDeserializer
mp.messaging.incoming.orders-in.auto.offset.reset=earliest

# Outgoing: publish enriched orders
mp.messaging.outgoing.orders-out.connector=smallrye-kafka
mp.messaging.outgoing.orders-out.topic=orders.enriched
mp.messaging.outgoing.orders-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Extra Outgoing: test publisher (REST -> Kafka orders.raw)
mp.messaging.outgoing.orders-raw.connector=smallrye-kafka
mp.messaging.outgoing.orders-raw.topic=orders.raw
mp.messaging.outgoing.orders-raw.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# ===== Datasource (PostgreSQL) =====
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=mastama
quarkus.datasource.password=post456
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres

# ORM
quarkus.hibernate-orm.log.sql=false

# Hibernate ? untuk first run, JANGAN validate dulu
quarkus.hibernate-orm.database.generation=update

# ===== Enrichment rules (example) =====
app.enrich.idr-threshold=1000000
app.enrich.fx.USD=16000
app.enrich.fx.IDR=1
app.enrich.fx.EUR=17500

# ===== Dev Services (optional if you have Docker) =====
 %dev.quarkus.kafka.devservices.enabled=true
 %dev.quarkus.datasource.devservices.enabled=true

# ===== Logging =====
quarkus.log.min-level=DEBUG
quarkus.log.category."com.yolifay".level=DEBUG
quarkus.log.category."org.apache.kafka".level=INFO
quarkus.log.console.json=false
